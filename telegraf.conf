[[inputs.mqtt_consumer]]
  servers = ["tcp://mqtt-2.omnivoltaic.com:1883"]
  topics = ["#"]
  data_format = "json_v2"

  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "mqtt_consumer"
    measurement_name_path = ""
    timestamp_path = ""
    timestamp_format = "2006-1-2 15:04:05"
    timestamp_timezone = "UTC"

    # Attributes
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "att"
      rename = "Attributes"

    # Commands
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "cmd"
      rename = "Commands"

    # Status
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "sts"
      rename = "Status"

    # Data
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "dta"
      rename = "Data"

    # Diagnostics
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "dia"
      rename = "Diagnostics"

    # Example for renaming specific keys within an object
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "att"
      fields = { "opid" = "string", "ppid" = "string", "flid" = "string", "frmv" = "string" }

    # Example for parsing specific fields within an object
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "cmd"
      fields = { "gstw" = "int", "gctw" = "int", "napn" = "string", "swch" = "int", "read" = "int", "rptm" = "int", "hbfq" = "int" }

    # Example for parsing specific fields within an object and mapping them to tags
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "sts"
      fields = { "sstc" = "int", "plat" = "float", "plon" = "float", "gpss" = "int", "gpfc" = "int", "rcrd" = "int", "trhd" = "int", "tpgd" = "int", "pgst" = "int", "tkre" = "int", "ocst" = "int" }

    [[inputs.mqtt_consumer.json_v2.object]]
      path = "dta"
      fields = { "batp" = "int", "inpp" = "int", "outp" = "int", "aeng" = "int", "pckv" = "int", "pckc" = "int", "rsoc" = "int", "rcap" = "int", "fccp" = "int", "pckt" = "int", "acyc" = "int" }

    [[inputs.mqtt_consumer.json_v2.object]]
      path = "dia"
      fields = { "cv01" = "int", "cv02" = "int", "cv03" = "int", "cv04" = "int", "cv05" = "int", "cv06" = "int", "cv07" = "int", "cv08" = "int", "cv09" = "int", "cv10" = "int", "cv11" = "int", "cv12" = "int", "cv13" = "int", "cv14" = "int", "cv15" = "int", "cv16" = "int", "cv17" = "int", "cv18" = "int", "cv19" = "int", "cv20" = "int" }


## Optional: If you want to explicitly specify string fields in the output, you can use the following:
# json_string_fields = ["att.opid", "att.ppid", "att.flid", "att.frmv", "cmd.pubk", "cmd.napn", "sts.crtm", "sts.udtm", "sts.time", "dta.sstm"]
# # Configuration for sending metrics to InfluxDB
[[outputs.influxdb_v2]]
  ## The URLs of the InfluxDB cluster nodes.
  ##
  ## Multiple URLs can be specified for a single cluster, only ONE of the
  ## urls will be written to each interval.
  ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
  urls = ["http://influxdb:8086"]

  ## Token for authentication.
  token = "72634f97852549cf138c59fe330001efb6d8d63004f069bb30c2955bb540e434"

  ## Organization is the name of the organization you wish to write to; must exist.
  organization = "oves"

  ## Destination bucket to write into.
  bucket = "telegraf"
[[outputs.mqtt]]
  servers = ["tcp://mqtt-2.omnivoltaic.com:1883"]
  # use a wildcard after cmd/#
  topic = "cmd/telegraf/oves"
  data_format = "influx"

